Grammar:

Rule 0     S' -> start
Rule 1     start -> func_def
Rule 2     start -> MODE seen_mode ID tree_body
Rule 3     seen_mode -> <empty>
Rule 4     func_def -> func_signature tree_body
Rule 5     func_signature -> MODE FUNC ID args RETURNS args
Rule 6     args -> ( args_list )
Rule 7     args_list -> empty
Rule 8     args_list -> name_typed COMMA args_list
Rule 9     args_list -> name_typed
Rule 10    tree_body -> { statements }
Rule 11    statements -> statement
Rule 12    statements -> statement statements
Rule 13    statement -> COMMENT
Rule 14    statement -> expr
Rule 15    statement -> assignment
Rule 16    statement -> declaration
Rule 17    declaration -> LET name_typed EQUALS expr
Rule 18    declaration -> LET ID EQUALS expr
Rule 19    assignment -> ID EQUALS expr
Rule 20    expr -> - expr  [precedence=right, level=3]
Rule 21    expr -> ( expr )
Rule 22    expr -> expr @ expr  [precedence=left, level=2]
Rule 23    expr -> expr / expr  [precedence=left, level=2]
Rule 24    expr -> expr * expr  [precedence=left, level=2]
Rule 25    expr -> expr - expr  [precedence=left, level=1]
Rule 26    expr -> expr + expr  [precedence=left, level=1]
Rule 27    expr -> cast_expr
Rule 28    expr -> accessor_expr
Rule 29    expr -> node_expr
Rule 30    expr -> vector_literal
Rule 31    expr -> BOOL
Rule 32    expr -> STRING
Rule 33    expr -> NUMBER
Rule 34    expr -> TYPE
Rule 35    expr -> ID
Rule 36    vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ]
Rule 37    node_expr -> expr ( params_list )
Rule 38    accessor_expr -> expr DOT ID
Rule 39    cast_expr -> expr AS TYPE
Rule 40    params_list -> named_params_list
Rule 41    params_list -> pos COMMA named_params_list
Rule 42    params_list -> pos COMMA params_list
Rule 43    params_list -> pos
Rule 44    params_list -> empty
Rule 45    named_params_list -> named COMMA named_params_list
Rule 46    named_params_list -> named
Rule 47    named -> ID COLON expr
Rule 48    pos -> expr
Rule 49    name_typed -> ID COLON TYPE
Rule 50    empty -> <empty>

Unused terminals:

    POW

Terminals, with rules where they appear:

(                    : 6 21 37
)                    : 6 21 37
*                    : 24
+                    : 26
-                    : 20 25
/                    : 23
@                    : 22
AS                   : 39
BOOL                 : 31
COLON                : 47 49
COMMA                : 8 36 36 41 42 45
COMMENT              : 13
DOT                  : 38
EQUALS               : 17 18 19
FUNC                 : 5
ID                   : 2 5 18 19 35 38 47 49
LET                  : 17 18
MODE                 : 2 5
NUMBER               : 33 36 36 36
POW                  : 
RETURNS              : 5
STRING               : 32
TYPE                 : 34 39 49
[                    : 36
]                    : 36
error                : 
{                    : 10
}                    : 10

Nonterminals, with rules where they appear:

accessor_expr        : 28
args                 : 5 5
args_list            : 6 8
assignment           : 15
cast_expr            : 27
declaration          : 16
empty                : 7 44
expr                 : 14 17 18 19 20 21 22 22 23 23 24 24 25 25 26 26 37 38 39 47 48
func_def             : 1
func_signature       : 4
name_typed           : 8 9 17
named                : 45 46
named_params_list    : 40 41 45
node_expr            : 29
params_list          : 37 42
pos                  : 41 42 43
seen_mode            : 2
start                : 0
statement            : 11 12
statements           : 10 12
tree_body            : 2 4
vector_literal       : 30


state 0

    (0) S' -> . start
    (1) start -> . func_def
    (2) start -> . MODE seen_mode ID tree_body
    (4) func_def -> . func_signature tree_body
    (5) func_signature -> . MODE FUNC ID args RETURNS args
    MODE            shift and go to state 3

    start                          shift and go to state 1
    func_def                       shift and go to state 2
    func_signature                 shift and go to state 4

state 1

    (0) S' -> start .


state 2

    (1) start -> func_def .
    $end            reduce using rule 1 (start -> func_def .)


state 3

    (2) start -> MODE . seen_mode ID tree_body
    (5) func_signature -> MODE . FUNC ID args RETURNS args
    (3) seen_mode -> .
    FUNC            shift and go to state 6
    ID              reduce using rule 3 (seen_mode -> .)

    seen_mode                      shift and go to state 5

state 4

    (4) func_def -> func_signature . tree_body
    (10) tree_body -> . { statements }
    {               shift and go to state 8

    tree_body                      shift and go to state 7

state 5

    (2) start -> MODE seen_mode . ID tree_body
    ID              shift and go to state 9


state 6

    (5) func_signature -> MODE FUNC . ID args RETURNS args
    ID              shift and go to state 10


state 7

    (4) func_def -> func_signature tree_body .
    $end            reduce using rule 4 (func_def -> func_signature tree_body .)


state 8

    (10) tree_body -> { . statements }
    (11) statements -> . statement
    (12) statements -> . statement statements
    (13) statement -> . COMMENT
    (14) statement -> . expr
    (15) statement -> . assignment
    (16) statement -> . declaration
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (19) assignment -> . ID EQUALS expr
    (17) declaration -> . LET name_typed EQUALS expr
    (18) declaration -> . LET ID EQUALS expr
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    COMMENT         shift and go to state 13
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 27
    LET             shift and go to state 28
    [               shift and go to state 29

    statements                     shift and go to state 11
    statement                      shift and go to state 12
    expr                           shift and go to state 14
    assignment                     shift and go to state 15
    declaration                    shift and go to state 16
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 9

    (2) start -> MODE seen_mode ID . tree_body
    (10) tree_body -> . { statements }
    {               shift and go to state 8

    tree_body                      shift and go to state 30

state 10

    (5) func_signature -> MODE FUNC ID . args RETURNS args
    (6) args -> . ( args_list )
    (               shift and go to state 32

    args                           shift and go to state 31

state 11

    (10) tree_body -> { statements . }
    }               shift and go to state 33


state 12

    (11) statements -> statement .
    (12) statements -> statement . statements
    (11) statements -> . statement
    (12) statements -> . statement statements
    (13) statement -> . COMMENT
    (14) statement -> . expr
    (15) statement -> . assignment
    (16) statement -> . declaration
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (19) assignment -> . ID EQUALS expr
    (17) declaration -> . LET name_typed EQUALS expr
    (18) declaration -> . LET ID EQUALS expr
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    }               reduce using rule 11 (statements -> statement .)
    COMMENT         shift and go to state 13
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 27
    LET             shift and go to state 28
    [               shift and go to state 29

    statement                      shift and go to state 12
    statements                     shift and go to state 34
    expr                           shift and go to state 14
    assignment                     shift and go to state 15
    declaration                    shift and go to state 16
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 13

    (13) statement -> COMMENT .
    COMMENT         reduce using rule 13 (statement -> COMMENT .)
    -               reduce using rule 13 (statement -> COMMENT .)
    (               reduce using rule 13 (statement -> COMMENT .)
    BOOL            reduce using rule 13 (statement -> COMMENT .)
    STRING          reduce using rule 13 (statement -> COMMENT .)
    NUMBER          reduce using rule 13 (statement -> COMMENT .)
    TYPE            reduce using rule 13 (statement -> COMMENT .)
    ID              reduce using rule 13 (statement -> COMMENT .)
    LET             reduce using rule 13 (statement -> COMMENT .)
    [               reduce using rule 13 (statement -> COMMENT .)
    }               reduce using rule 13 (statement -> COMMENT .)


state 14

    (14) statement -> expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    COMMENT         reduce using rule 14 (statement -> expr .)
    BOOL            reduce using rule 14 (statement -> expr .)
    STRING          reduce using rule 14 (statement -> expr .)
    NUMBER          reduce using rule 14 (statement -> expr .)
    TYPE            reduce using rule 14 (statement -> expr .)
    ID              reduce using rule 14 (statement -> expr .)
    LET             reduce using rule 14 (statement -> expr .)
    [               reduce using rule 14 (statement -> expr .)
    }               reduce using rule 14 (statement -> expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 15

    (15) statement -> assignment .
    COMMENT         reduce using rule 15 (statement -> assignment .)
    -               reduce using rule 15 (statement -> assignment .)
    (               reduce using rule 15 (statement -> assignment .)
    BOOL            reduce using rule 15 (statement -> assignment .)
    STRING          reduce using rule 15 (statement -> assignment .)
    NUMBER          reduce using rule 15 (statement -> assignment .)
    TYPE            reduce using rule 15 (statement -> assignment .)
    ID              reduce using rule 15 (statement -> assignment .)
    LET             reduce using rule 15 (statement -> assignment .)
    [               reduce using rule 15 (statement -> assignment .)
    }               reduce using rule 15 (statement -> assignment .)


state 16

    (16) statement -> declaration .
    COMMENT         reduce using rule 16 (statement -> declaration .)
    -               reduce using rule 16 (statement -> declaration .)
    (               reduce using rule 16 (statement -> declaration .)
    BOOL            reduce using rule 16 (statement -> declaration .)
    STRING          reduce using rule 16 (statement -> declaration .)
    NUMBER          reduce using rule 16 (statement -> declaration .)
    TYPE            reduce using rule 16 (statement -> declaration .)
    ID              reduce using rule 16 (statement -> declaration .)
    LET             reduce using rule 16 (statement -> declaration .)
    [               reduce using rule 16 (statement -> declaration .)
    }               reduce using rule 16 (statement -> declaration .)


state 17

    (20) expr -> - . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 43
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 18

    (21) expr -> ( . expr )
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 45
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 19

    (27) expr -> cast_expr .
    @               reduce using rule 27 (expr -> cast_expr .)
    /               reduce using rule 27 (expr -> cast_expr .)
    *               reduce using rule 27 (expr -> cast_expr .)
    -               reduce using rule 27 (expr -> cast_expr .)
    +               reduce using rule 27 (expr -> cast_expr .)
    AS              reduce using rule 27 (expr -> cast_expr .)
    DOT             reduce using rule 27 (expr -> cast_expr .)
    (               reduce using rule 27 (expr -> cast_expr .)
    COMMENT         reduce using rule 27 (expr -> cast_expr .)
    BOOL            reduce using rule 27 (expr -> cast_expr .)
    STRING          reduce using rule 27 (expr -> cast_expr .)
    NUMBER          reduce using rule 27 (expr -> cast_expr .)
    TYPE            reduce using rule 27 (expr -> cast_expr .)
    ID              reduce using rule 27 (expr -> cast_expr .)
    LET             reduce using rule 27 (expr -> cast_expr .)
    [               reduce using rule 27 (expr -> cast_expr .)
    }               reduce using rule 27 (expr -> cast_expr .)
    )               reduce using rule 27 (expr -> cast_expr .)
    COMMA           reduce using rule 27 (expr -> cast_expr .)


state 20

    (28) expr -> accessor_expr .
    @               reduce using rule 28 (expr -> accessor_expr .)
    /               reduce using rule 28 (expr -> accessor_expr .)
    *               reduce using rule 28 (expr -> accessor_expr .)
    -               reduce using rule 28 (expr -> accessor_expr .)
    +               reduce using rule 28 (expr -> accessor_expr .)
    AS              reduce using rule 28 (expr -> accessor_expr .)
    DOT             reduce using rule 28 (expr -> accessor_expr .)
    (               reduce using rule 28 (expr -> accessor_expr .)
    COMMENT         reduce using rule 28 (expr -> accessor_expr .)
    BOOL            reduce using rule 28 (expr -> accessor_expr .)
    STRING          reduce using rule 28 (expr -> accessor_expr .)
    NUMBER          reduce using rule 28 (expr -> accessor_expr .)
    TYPE            reduce using rule 28 (expr -> accessor_expr .)
    ID              reduce using rule 28 (expr -> accessor_expr .)
    LET             reduce using rule 28 (expr -> accessor_expr .)
    [               reduce using rule 28 (expr -> accessor_expr .)
    }               reduce using rule 28 (expr -> accessor_expr .)
    )               reduce using rule 28 (expr -> accessor_expr .)
    COMMA           reduce using rule 28 (expr -> accessor_expr .)


state 21

    (29) expr -> node_expr .
    @               reduce using rule 29 (expr -> node_expr .)
    /               reduce using rule 29 (expr -> node_expr .)
    *               reduce using rule 29 (expr -> node_expr .)
    -               reduce using rule 29 (expr -> node_expr .)
    +               reduce using rule 29 (expr -> node_expr .)
    AS              reduce using rule 29 (expr -> node_expr .)
    DOT             reduce using rule 29 (expr -> node_expr .)
    (               reduce using rule 29 (expr -> node_expr .)
    COMMENT         reduce using rule 29 (expr -> node_expr .)
    BOOL            reduce using rule 29 (expr -> node_expr .)
    STRING          reduce using rule 29 (expr -> node_expr .)
    NUMBER          reduce using rule 29 (expr -> node_expr .)
    TYPE            reduce using rule 29 (expr -> node_expr .)
    ID              reduce using rule 29 (expr -> node_expr .)
    LET             reduce using rule 29 (expr -> node_expr .)
    [               reduce using rule 29 (expr -> node_expr .)
    }               reduce using rule 29 (expr -> node_expr .)
    )               reduce using rule 29 (expr -> node_expr .)
    COMMA           reduce using rule 29 (expr -> node_expr .)


state 22

    (30) expr -> vector_literal .
    @               reduce using rule 30 (expr -> vector_literal .)
    /               reduce using rule 30 (expr -> vector_literal .)
    *               reduce using rule 30 (expr -> vector_literal .)
    -               reduce using rule 30 (expr -> vector_literal .)
    +               reduce using rule 30 (expr -> vector_literal .)
    AS              reduce using rule 30 (expr -> vector_literal .)
    DOT             reduce using rule 30 (expr -> vector_literal .)
    (               reduce using rule 30 (expr -> vector_literal .)
    COMMENT         reduce using rule 30 (expr -> vector_literal .)
    BOOL            reduce using rule 30 (expr -> vector_literal .)
    STRING          reduce using rule 30 (expr -> vector_literal .)
    NUMBER          reduce using rule 30 (expr -> vector_literal .)
    TYPE            reduce using rule 30 (expr -> vector_literal .)
    ID              reduce using rule 30 (expr -> vector_literal .)
    LET             reduce using rule 30 (expr -> vector_literal .)
    [               reduce using rule 30 (expr -> vector_literal .)
    }               reduce using rule 30 (expr -> vector_literal .)
    )               reduce using rule 30 (expr -> vector_literal .)
    COMMA           reduce using rule 30 (expr -> vector_literal .)


state 23

    (31) expr -> BOOL .
    @               reduce using rule 31 (expr -> BOOL .)
    /               reduce using rule 31 (expr -> BOOL .)
    *               reduce using rule 31 (expr -> BOOL .)
    -               reduce using rule 31 (expr -> BOOL .)
    +               reduce using rule 31 (expr -> BOOL .)
    AS              reduce using rule 31 (expr -> BOOL .)
    DOT             reduce using rule 31 (expr -> BOOL .)
    (               reduce using rule 31 (expr -> BOOL .)
    COMMENT         reduce using rule 31 (expr -> BOOL .)
    BOOL            reduce using rule 31 (expr -> BOOL .)
    STRING          reduce using rule 31 (expr -> BOOL .)
    NUMBER          reduce using rule 31 (expr -> BOOL .)
    TYPE            reduce using rule 31 (expr -> BOOL .)
    ID              reduce using rule 31 (expr -> BOOL .)
    LET             reduce using rule 31 (expr -> BOOL .)
    [               reduce using rule 31 (expr -> BOOL .)
    }               reduce using rule 31 (expr -> BOOL .)
    )               reduce using rule 31 (expr -> BOOL .)
    COMMA           reduce using rule 31 (expr -> BOOL .)


state 24

    (32) expr -> STRING .
    @               reduce using rule 32 (expr -> STRING .)
    /               reduce using rule 32 (expr -> STRING .)
    *               reduce using rule 32 (expr -> STRING .)
    -               reduce using rule 32 (expr -> STRING .)
    +               reduce using rule 32 (expr -> STRING .)
    AS              reduce using rule 32 (expr -> STRING .)
    DOT             reduce using rule 32 (expr -> STRING .)
    (               reduce using rule 32 (expr -> STRING .)
    COMMENT         reduce using rule 32 (expr -> STRING .)
    BOOL            reduce using rule 32 (expr -> STRING .)
    STRING          reduce using rule 32 (expr -> STRING .)
    NUMBER          reduce using rule 32 (expr -> STRING .)
    TYPE            reduce using rule 32 (expr -> STRING .)
    ID              reduce using rule 32 (expr -> STRING .)
    LET             reduce using rule 32 (expr -> STRING .)
    [               reduce using rule 32 (expr -> STRING .)
    }               reduce using rule 32 (expr -> STRING .)
    )               reduce using rule 32 (expr -> STRING .)
    COMMA           reduce using rule 32 (expr -> STRING .)


state 25

    (33) expr -> NUMBER .
    @               reduce using rule 33 (expr -> NUMBER .)
    /               reduce using rule 33 (expr -> NUMBER .)
    *               reduce using rule 33 (expr -> NUMBER .)
    -               reduce using rule 33 (expr -> NUMBER .)
    +               reduce using rule 33 (expr -> NUMBER .)
    AS              reduce using rule 33 (expr -> NUMBER .)
    DOT             reduce using rule 33 (expr -> NUMBER .)
    (               reduce using rule 33 (expr -> NUMBER .)
    COMMENT         reduce using rule 33 (expr -> NUMBER .)
    BOOL            reduce using rule 33 (expr -> NUMBER .)
    STRING          reduce using rule 33 (expr -> NUMBER .)
    NUMBER          reduce using rule 33 (expr -> NUMBER .)
    TYPE            reduce using rule 33 (expr -> NUMBER .)
    ID              reduce using rule 33 (expr -> NUMBER .)
    LET             reduce using rule 33 (expr -> NUMBER .)
    [               reduce using rule 33 (expr -> NUMBER .)
    }               reduce using rule 33 (expr -> NUMBER .)
    )               reduce using rule 33 (expr -> NUMBER .)
    COMMA           reduce using rule 33 (expr -> NUMBER .)


state 26

    (34) expr -> TYPE .
    @               reduce using rule 34 (expr -> TYPE .)
    /               reduce using rule 34 (expr -> TYPE .)
    *               reduce using rule 34 (expr -> TYPE .)
    -               reduce using rule 34 (expr -> TYPE .)
    +               reduce using rule 34 (expr -> TYPE .)
    AS              reduce using rule 34 (expr -> TYPE .)
    DOT             reduce using rule 34 (expr -> TYPE .)
    (               reduce using rule 34 (expr -> TYPE .)
    COMMENT         reduce using rule 34 (expr -> TYPE .)
    BOOL            reduce using rule 34 (expr -> TYPE .)
    STRING          reduce using rule 34 (expr -> TYPE .)
    NUMBER          reduce using rule 34 (expr -> TYPE .)
    TYPE            reduce using rule 34 (expr -> TYPE .)
    ID              reduce using rule 34 (expr -> TYPE .)
    LET             reduce using rule 34 (expr -> TYPE .)
    [               reduce using rule 34 (expr -> TYPE .)
    }               reduce using rule 34 (expr -> TYPE .)
    )               reduce using rule 34 (expr -> TYPE .)
    COMMA           reduce using rule 34 (expr -> TYPE .)


state 27

    (35) expr -> ID .
    (19) assignment -> ID . EQUALS expr
    @               reduce using rule 35 (expr -> ID .)
    /               reduce using rule 35 (expr -> ID .)
    *               reduce using rule 35 (expr -> ID .)
    -               reduce using rule 35 (expr -> ID .)
    +               reduce using rule 35 (expr -> ID .)
    AS              reduce using rule 35 (expr -> ID .)
    DOT             reduce using rule 35 (expr -> ID .)
    (               reduce using rule 35 (expr -> ID .)
    COMMENT         reduce using rule 35 (expr -> ID .)
    BOOL            reduce using rule 35 (expr -> ID .)
    STRING          reduce using rule 35 (expr -> ID .)
    NUMBER          reduce using rule 35 (expr -> ID .)
    TYPE            reduce using rule 35 (expr -> ID .)
    ID              reduce using rule 35 (expr -> ID .)
    LET             reduce using rule 35 (expr -> ID .)
    [               reduce using rule 35 (expr -> ID .)
    }               reduce using rule 35 (expr -> ID .)
    EQUALS          shift and go to state 46


state 28

    (17) declaration -> LET . name_typed EQUALS expr
    (18) declaration -> LET . ID EQUALS expr
    (49) name_typed -> . ID COLON TYPE
    ID              shift and go to state 48

    name_typed                     shift and go to state 47

state 29

    (36) vector_literal -> [ . NUMBER COMMA NUMBER COMMA NUMBER ]
    NUMBER          shift and go to state 49


state 30

    (2) start -> MODE seen_mode ID tree_body .
    $end            reduce using rule 2 (start -> MODE seen_mode ID tree_body .)


state 31

    (5) func_signature -> MODE FUNC ID args . RETURNS args
    RETURNS         shift and go to state 50


state 32

    (6) args -> ( . args_list )
    (7) args_list -> . empty
    (8) args_list -> . name_typed COMMA args_list
    (9) args_list -> . name_typed
    (50) empty -> .
    (49) name_typed -> . ID COLON TYPE
    )               reduce using rule 50 (empty -> .)
    ID              shift and go to state 54

    args_list                      shift and go to state 51
    empty                          shift and go to state 52
    name_typed                     shift and go to state 53

state 33

    (10) tree_body -> { statements } .
    $end            reduce using rule 10 (tree_body -> { statements } .)


state 34

    (12) statements -> statement statements .
    }               reduce using rule 12 (statements -> statement statements .)


state 35

    (22) expr -> expr @ . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 55
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 36

    (23) expr -> expr / . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 56
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 37

    (24) expr -> expr * . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 57
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 38

    (25) expr -> expr - . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 58
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 39

    (26) expr -> expr + . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 59
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 40

    (39) cast_expr -> expr AS . TYPE
    TYPE            shift and go to state 60


state 41

    (38) accessor_expr -> expr DOT . ID
    ID              shift and go to state 61


state 42

    (37) node_expr -> expr ( . params_list )
    (40) params_list -> . named_params_list
    (41) params_list -> . pos COMMA named_params_list
    (42) params_list -> . pos COMMA params_list
    (43) params_list -> . pos
    (44) params_list -> . empty
    (45) named_params_list -> . named COMMA named_params_list
    (46) named_params_list -> . named
    (48) pos -> . expr
    (50) empty -> .
    (47) named -> . ID COLON expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    )               reduce using rule 50 (empty -> .)
    ID              shift and go to state 68
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    [               shift and go to state 29

    expr                           shift and go to state 62
    params_list                    shift and go to state 63
    named_params_list              shift and go to state 64
    pos                            shift and go to state 65
    empty                          shift and go to state 66
    named                          shift and go to state 67
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 43

    (20) expr -> - expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    @               reduce using rule 20 (expr -> - expr .)
    /               reduce using rule 20 (expr -> - expr .)
    *               reduce using rule 20 (expr -> - expr .)
    -               reduce using rule 20 (expr -> - expr .)
    +               reduce using rule 20 (expr -> - expr .)
    AS              reduce using rule 20 (expr -> - expr .)
    DOT             reduce using rule 20 (expr -> - expr .)
    (               reduce using rule 20 (expr -> - expr .)
    COMMENT         reduce using rule 20 (expr -> - expr .)
    BOOL            reduce using rule 20 (expr -> - expr .)
    STRING          reduce using rule 20 (expr -> - expr .)
    NUMBER          reduce using rule 20 (expr -> - expr .)
    TYPE            reduce using rule 20 (expr -> - expr .)
    ID              reduce using rule 20 (expr -> - expr .)
    LET             reduce using rule 20 (expr -> - expr .)
    [               reduce using rule 20 (expr -> - expr .)
    }               reduce using rule 20 (expr -> - expr .)
    )               reduce using rule 20 (expr -> - expr .)
    COMMA           reduce using rule 20 (expr -> - expr .)


state 44

    (35) expr -> ID .
    @               reduce using rule 35 (expr -> ID .)
    /               reduce using rule 35 (expr -> ID .)
    *               reduce using rule 35 (expr -> ID .)
    -               reduce using rule 35 (expr -> ID .)
    +               reduce using rule 35 (expr -> ID .)
    AS              reduce using rule 35 (expr -> ID .)
    DOT             reduce using rule 35 (expr -> ID .)
    (               reduce using rule 35 (expr -> ID .)
    COMMENT         reduce using rule 35 (expr -> ID .)
    BOOL            reduce using rule 35 (expr -> ID .)
    STRING          reduce using rule 35 (expr -> ID .)
    NUMBER          reduce using rule 35 (expr -> ID .)
    TYPE            reduce using rule 35 (expr -> ID .)
    ID              reduce using rule 35 (expr -> ID .)
    LET             reduce using rule 35 (expr -> ID .)
    [               reduce using rule 35 (expr -> ID .)
    }               reduce using rule 35 (expr -> ID .)
    )               reduce using rule 35 (expr -> ID .)
    COMMA           reduce using rule 35 (expr -> ID .)


state 45

    (21) expr -> ( expr . )
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    )               shift and go to state 69
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 46

    (19) assignment -> ID EQUALS . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 70
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 47

    (17) declaration -> LET name_typed . EQUALS expr
    EQUALS          shift and go to state 71


state 48

    (18) declaration -> LET ID . EQUALS expr
    (49) name_typed -> ID . COLON TYPE
    EQUALS          shift and go to state 72
    COLON           shift and go to state 73


state 49

    (36) vector_literal -> [ NUMBER . COMMA NUMBER COMMA NUMBER ]
    COMMA           shift and go to state 74


state 50

    (5) func_signature -> MODE FUNC ID args RETURNS . args
    (6) args -> . ( args_list )
    (               shift and go to state 32

    args                           shift and go to state 75

state 51

    (6) args -> ( args_list . )
    )               shift and go to state 76


state 52

    (7) args_list -> empty .
    )               reduce using rule 7 (args_list -> empty .)


state 53

    (8) args_list -> name_typed . COMMA args_list
    (9) args_list -> name_typed .
    COMMA           shift and go to state 77
    )               reduce using rule 9 (args_list -> name_typed .)


state 54

    (49) name_typed -> ID . COLON TYPE
    COLON           shift and go to state 73


state 55

    (22) expr -> expr @ expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    @               reduce using rule 22 (expr -> expr @ expr .)
    /               reduce using rule 22 (expr -> expr @ expr .)
    *               reduce using rule 22 (expr -> expr @ expr .)
    -               reduce using rule 22 (expr -> expr @ expr .)
    +               reduce using rule 22 (expr -> expr @ expr .)
    AS              reduce using rule 22 (expr -> expr @ expr .)
    DOT             reduce using rule 22 (expr -> expr @ expr .)
    (               reduce using rule 22 (expr -> expr @ expr .)
    COMMENT         reduce using rule 22 (expr -> expr @ expr .)
    BOOL            reduce using rule 22 (expr -> expr @ expr .)
    STRING          reduce using rule 22 (expr -> expr @ expr .)
    NUMBER          reduce using rule 22 (expr -> expr @ expr .)
    TYPE            reduce using rule 22 (expr -> expr @ expr .)
    ID              reduce using rule 22 (expr -> expr @ expr .)
    LET             reduce using rule 22 (expr -> expr @ expr .)
    [               reduce using rule 22 (expr -> expr @ expr .)
    }               reduce using rule 22 (expr -> expr @ expr .)
    )               reduce using rule 22 (expr -> expr @ expr .)
    COMMA           reduce using rule 22 (expr -> expr @ expr .)


state 56

    (23) expr -> expr / expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    @               reduce using rule 23 (expr -> expr / expr .)
    /               reduce using rule 23 (expr -> expr / expr .)
    *               reduce using rule 23 (expr -> expr / expr .)
    -               reduce using rule 23 (expr -> expr / expr .)
    +               reduce using rule 23 (expr -> expr / expr .)
    AS              reduce using rule 23 (expr -> expr / expr .)
    DOT             reduce using rule 23 (expr -> expr / expr .)
    (               reduce using rule 23 (expr -> expr / expr .)
    COMMENT         reduce using rule 23 (expr -> expr / expr .)
    BOOL            reduce using rule 23 (expr -> expr / expr .)
    STRING          reduce using rule 23 (expr -> expr / expr .)
    NUMBER          reduce using rule 23 (expr -> expr / expr .)
    TYPE            reduce using rule 23 (expr -> expr / expr .)
    ID              reduce using rule 23 (expr -> expr / expr .)
    LET             reduce using rule 23 (expr -> expr / expr .)
    [               reduce using rule 23 (expr -> expr / expr .)
    }               reduce using rule 23 (expr -> expr / expr .)
    )               reduce using rule 23 (expr -> expr / expr .)
    COMMA           reduce using rule 23 (expr -> expr / expr .)


state 57

    (24) expr -> expr * expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    @               reduce using rule 24 (expr -> expr * expr .)
    /               reduce using rule 24 (expr -> expr * expr .)
    *               reduce using rule 24 (expr -> expr * expr .)
    -               reduce using rule 24 (expr -> expr * expr .)
    +               reduce using rule 24 (expr -> expr * expr .)
    AS              reduce using rule 24 (expr -> expr * expr .)
    DOT             reduce using rule 24 (expr -> expr * expr .)
    (               reduce using rule 24 (expr -> expr * expr .)
    COMMENT         reduce using rule 24 (expr -> expr * expr .)
    BOOL            reduce using rule 24 (expr -> expr * expr .)
    STRING          reduce using rule 24 (expr -> expr * expr .)
    NUMBER          reduce using rule 24 (expr -> expr * expr .)
    TYPE            reduce using rule 24 (expr -> expr * expr .)
    ID              reduce using rule 24 (expr -> expr * expr .)
    LET             reduce using rule 24 (expr -> expr * expr .)
    [               reduce using rule 24 (expr -> expr * expr .)
    }               reduce using rule 24 (expr -> expr * expr .)
    )               reduce using rule 24 (expr -> expr * expr .)
    COMMA           reduce using rule 24 (expr -> expr * expr .)


state 58

    (25) expr -> expr - expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    -               reduce using rule 25 (expr -> expr - expr .)
    +               reduce using rule 25 (expr -> expr - expr .)
    AS              reduce using rule 25 (expr -> expr - expr .)
    DOT             reduce using rule 25 (expr -> expr - expr .)
    (               reduce using rule 25 (expr -> expr - expr .)
    COMMENT         reduce using rule 25 (expr -> expr - expr .)
    BOOL            reduce using rule 25 (expr -> expr - expr .)
    STRING          reduce using rule 25 (expr -> expr - expr .)
    NUMBER          reduce using rule 25 (expr -> expr - expr .)
    TYPE            reduce using rule 25 (expr -> expr - expr .)
    ID              reduce using rule 25 (expr -> expr - expr .)
    LET             reduce using rule 25 (expr -> expr - expr .)
    [               reduce using rule 25 (expr -> expr - expr .)
    }               reduce using rule 25 (expr -> expr - expr .)
    )               reduce using rule 25 (expr -> expr - expr .)
    COMMA           reduce using rule 25 (expr -> expr - expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37


state 59

    (26) expr -> expr + expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    -               reduce using rule 26 (expr -> expr + expr .)
    +               reduce using rule 26 (expr -> expr + expr .)
    AS              reduce using rule 26 (expr -> expr + expr .)
    DOT             reduce using rule 26 (expr -> expr + expr .)
    (               reduce using rule 26 (expr -> expr + expr .)
    COMMENT         reduce using rule 26 (expr -> expr + expr .)
    BOOL            reduce using rule 26 (expr -> expr + expr .)
    STRING          reduce using rule 26 (expr -> expr + expr .)
    NUMBER          reduce using rule 26 (expr -> expr + expr .)
    TYPE            reduce using rule 26 (expr -> expr + expr .)
    ID              reduce using rule 26 (expr -> expr + expr .)
    LET             reduce using rule 26 (expr -> expr + expr .)
    [               reduce using rule 26 (expr -> expr + expr .)
    }               reduce using rule 26 (expr -> expr + expr .)
    )               reduce using rule 26 (expr -> expr + expr .)
    COMMA           reduce using rule 26 (expr -> expr + expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37


state 60

    (39) cast_expr -> expr AS TYPE .
    @               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    /               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    *               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    -               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    +               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    AS              reduce using rule 39 (cast_expr -> expr AS TYPE .)
    DOT             reduce using rule 39 (cast_expr -> expr AS TYPE .)
    (               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    COMMENT         reduce using rule 39 (cast_expr -> expr AS TYPE .)
    BOOL            reduce using rule 39 (cast_expr -> expr AS TYPE .)
    STRING          reduce using rule 39 (cast_expr -> expr AS TYPE .)
    NUMBER          reduce using rule 39 (cast_expr -> expr AS TYPE .)
    TYPE            reduce using rule 39 (cast_expr -> expr AS TYPE .)
    ID              reduce using rule 39 (cast_expr -> expr AS TYPE .)
    LET             reduce using rule 39 (cast_expr -> expr AS TYPE .)
    [               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    }               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    )               reduce using rule 39 (cast_expr -> expr AS TYPE .)
    COMMA           reduce using rule 39 (cast_expr -> expr AS TYPE .)


state 61

    (38) accessor_expr -> expr DOT ID .
    @               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    /               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    *               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    -               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    +               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    AS              reduce using rule 38 (accessor_expr -> expr DOT ID .)
    DOT             reduce using rule 38 (accessor_expr -> expr DOT ID .)
    (               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    COMMENT         reduce using rule 38 (accessor_expr -> expr DOT ID .)
    BOOL            reduce using rule 38 (accessor_expr -> expr DOT ID .)
    STRING          reduce using rule 38 (accessor_expr -> expr DOT ID .)
    NUMBER          reduce using rule 38 (accessor_expr -> expr DOT ID .)
    TYPE            reduce using rule 38 (accessor_expr -> expr DOT ID .)
    ID              reduce using rule 38 (accessor_expr -> expr DOT ID .)
    LET             reduce using rule 38 (accessor_expr -> expr DOT ID .)
    [               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    }               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    )               reduce using rule 38 (accessor_expr -> expr DOT ID .)
    COMMA           reduce using rule 38 (accessor_expr -> expr DOT ID .)


state 62

    (48) pos -> expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    COMMA           reduce using rule 48 (pos -> expr .)
    )               reduce using rule 48 (pos -> expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 63

    (37) node_expr -> expr ( params_list . )
    )               shift and go to state 78


state 64

    (40) params_list -> named_params_list .
    )               reduce using rule 40 (params_list -> named_params_list .)


state 65

    (41) params_list -> pos . COMMA named_params_list
    (42) params_list -> pos . COMMA params_list
    (43) params_list -> pos .
    COMMA           shift and go to state 79
    )               reduce using rule 43 (params_list -> pos .)


state 66

    (44) params_list -> empty .
    )               reduce using rule 44 (params_list -> empty .)


state 67

    (45) named_params_list -> named . COMMA named_params_list
    (46) named_params_list -> named .
    COMMA           shift and go to state 80
    )               reduce using rule 46 (named_params_list -> named .)


state 68

    (47) named -> ID . COLON expr
    (35) expr -> ID .
    COLON           shift and go to state 81
    @               reduce using rule 35 (expr -> ID .)
    /               reduce using rule 35 (expr -> ID .)
    *               reduce using rule 35 (expr -> ID .)
    -               reduce using rule 35 (expr -> ID .)
    +               reduce using rule 35 (expr -> ID .)
    AS              reduce using rule 35 (expr -> ID .)
    DOT             reduce using rule 35 (expr -> ID .)
    (               reduce using rule 35 (expr -> ID .)
    COMMA           reduce using rule 35 (expr -> ID .)
    )               reduce using rule 35 (expr -> ID .)


state 69

    (21) expr -> ( expr ) .
    @               reduce using rule 21 (expr -> ( expr ) .)
    /               reduce using rule 21 (expr -> ( expr ) .)
    *               reduce using rule 21 (expr -> ( expr ) .)
    -               reduce using rule 21 (expr -> ( expr ) .)
    +               reduce using rule 21 (expr -> ( expr ) .)
    AS              reduce using rule 21 (expr -> ( expr ) .)
    DOT             reduce using rule 21 (expr -> ( expr ) .)
    (               reduce using rule 21 (expr -> ( expr ) .)
    COMMENT         reduce using rule 21 (expr -> ( expr ) .)
    BOOL            reduce using rule 21 (expr -> ( expr ) .)
    STRING          reduce using rule 21 (expr -> ( expr ) .)
    NUMBER          reduce using rule 21 (expr -> ( expr ) .)
    TYPE            reduce using rule 21 (expr -> ( expr ) .)
    ID              reduce using rule 21 (expr -> ( expr ) .)
    LET             reduce using rule 21 (expr -> ( expr ) .)
    [               reduce using rule 21 (expr -> ( expr ) .)
    }               reduce using rule 21 (expr -> ( expr ) .)
    )               reduce using rule 21 (expr -> ( expr ) .)
    COMMA           reduce using rule 21 (expr -> ( expr ) .)


state 70

    (19) assignment -> ID EQUALS expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    COMMENT         reduce using rule 19 (assignment -> ID EQUALS expr .)
    BOOL            reduce using rule 19 (assignment -> ID EQUALS expr .)
    STRING          reduce using rule 19 (assignment -> ID EQUALS expr .)
    NUMBER          reduce using rule 19 (assignment -> ID EQUALS expr .)
    TYPE            reduce using rule 19 (assignment -> ID EQUALS expr .)
    ID              reduce using rule 19 (assignment -> ID EQUALS expr .)
    LET             reduce using rule 19 (assignment -> ID EQUALS expr .)
    [               reduce using rule 19 (assignment -> ID EQUALS expr .)
    }               reduce using rule 19 (assignment -> ID EQUALS expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 71

    (17) declaration -> LET name_typed EQUALS . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 82
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 72

    (18) declaration -> LET ID EQUALS . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 83
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 73

    (49) name_typed -> ID COLON . TYPE
    TYPE            shift and go to state 84


state 74

    (36) vector_literal -> [ NUMBER COMMA . NUMBER COMMA NUMBER ]
    NUMBER          shift and go to state 85


state 75

    (5) func_signature -> MODE FUNC ID args RETURNS args .
    {               reduce using rule 5 (func_signature -> MODE FUNC ID args RETURNS args .)


state 76

    (6) args -> ( args_list ) .
    RETURNS         reduce using rule 6 (args -> ( args_list ) .)
    {               reduce using rule 6 (args -> ( args_list ) .)


state 77

    (8) args_list -> name_typed COMMA . args_list
    (7) args_list -> . empty
    (8) args_list -> . name_typed COMMA args_list
    (9) args_list -> . name_typed
    (50) empty -> .
    (49) name_typed -> . ID COLON TYPE
    )               reduce using rule 50 (empty -> .)
    ID              shift and go to state 54

    name_typed                     shift and go to state 53
    args_list                      shift and go to state 86
    empty                          shift and go to state 52

state 78

    (37) node_expr -> expr ( params_list ) .
    @               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    /               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    *               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    -               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    +               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    AS              reduce using rule 37 (node_expr -> expr ( params_list ) .)
    DOT             reduce using rule 37 (node_expr -> expr ( params_list ) .)
    (               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    COMMENT         reduce using rule 37 (node_expr -> expr ( params_list ) .)
    BOOL            reduce using rule 37 (node_expr -> expr ( params_list ) .)
    STRING          reduce using rule 37 (node_expr -> expr ( params_list ) .)
    NUMBER          reduce using rule 37 (node_expr -> expr ( params_list ) .)
    TYPE            reduce using rule 37 (node_expr -> expr ( params_list ) .)
    ID              reduce using rule 37 (node_expr -> expr ( params_list ) .)
    LET             reduce using rule 37 (node_expr -> expr ( params_list ) .)
    [               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    }               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    )               reduce using rule 37 (node_expr -> expr ( params_list ) .)
    COMMA           reduce using rule 37 (node_expr -> expr ( params_list ) .)


state 79

    (41) params_list -> pos COMMA . named_params_list
    (42) params_list -> pos COMMA . params_list
    (45) named_params_list -> . named COMMA named_params_list
    (46) named_params_list -> . named
    (40) params_list -> . named_params_list
    (41) params_list -> . pos COMMA named_params_list
    (42) params_list -> . pos COMMA params_list
    (43) params_list -> . pos
    (44) params_list -> . empty
    (47) named -> . ID COLON expr
    (48) pos -> . expr
    (50) empty -> .
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    ID              shift and go to state 68
    )               reduce using rule 50 (empty -> .)
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    [               shift and go to state 29

    pos                            shift and go to state 65
    named_params_list              shift and go to state 87
    params_list                    shift and go to state 88
    named                          shift and go to state 67
    empty                          shift and go to state 66
    expr                           shift and go to state 62
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 80

    (45) named_params_list -> named COMMA . named_params_list
    (45) named_params_list -> . named COMMA named_params_list
    (46) named_params_list -> . named
    (47) named -> . ID COLON expr
    ID              shift and go to state 90

    named                          shift and go to state 67
    named_params_list              shift and go to state 89

state 81

    (47) named -> ID COLON . expr
    (20) expr -> . - expr
    (21) expr -> . ( expr )
    (22) expr -> . expr @ expr
    (23) expr -> . expr / expr
    (24) expr -> . expr * expr
    (25) expr -> . expr - expr
    (26) expr -> . expr + expr
    (27) expr -> . cast_expr
    (28) expr -> . accessor_expr
    (29) expr -> . node_expr
    (30) expr -> . vector_literal
    (31) expr -> . BOOL
    (32) expr -> . STRING
    (33) expr -> . NUMBER
    (34) expr -> . TYPE
    (35) expr -> . ID
    (39) cast_expr -> . expr AS TYPE
    (38) accessor_expr -> . expr DOT ID
    (37) node_expr -> . expr ( params_list )
    (36) vector_literal -> . [ NUMBER COMMA NUMBER COMMA NUMBER ]
    -               shift and go to state 17
    (               shift and go to state 18
    BOOL            shift and go to state 23
    STRING          shift and go to state 24
    NUMBER          shift and go to state 25
    TYPE            shift and go to state 26
    ID              shift and go to state 44
    [               shift and go to state 29

    expr                           shift and go to state 91
    cast_expr                      shift and go to state 19
    accessor_expr                  shift and go to state 20
    node_expr                      shift and go to state 21
    vector_literal                 shift and go to state 22

state 82

    (17) declaration -> LET name_typed EQUALS expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    COMMENT         reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    BOOL            reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    STRING          reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    NUMBER          reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    TYPE            reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    ID              reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    LET             reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    [               reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    }               reduce using rule 17 (declaration -> LET name_typed EQUALS expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 83

    (18) declaration -> LET ID EQUALS expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    COMMENT         reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    BOOL            reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    STRING          reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    NUMBER          reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    TYPE            reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    ID              reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    LET             reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    [               reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    }               reduce using rule 18 (declaration -> LET ID EQUALS expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 84

    (49) name_typed -> ID COLON TYPE .
    EQUALS          reduce using rule 49 (name_typed -> ID COLON TYPE .)
    COMMA           reduce using rule 49 (name_typed -> ID COLON TYPE .)
    )               reduce using rule 49 (name_typed -> ID COLON TYPE .)


state 85

    (36) vector_literal -> [ NUMBER COMMA NUMBER . COMMA NUMBER ]
    COMMA           shift and go to state 92


state 86

    (8) args_list -> name_typed COMMA args_list .
    )               reduce using rule 8 (args_list -> name_typed COMMA args_list .)


state 87

    (41) params_list -> pos COMMA named_params_list .
    (40) params_list -> named_params_list .
  ! reduce/reduce conflict for ) resolved using rule 41 (params_list -> pos COMMA named_params_list .)
    )               reduce using rule 41 (params_list -> pos COMMA named_params_list .)


state 88

    (42) params_list -> pos COMMA params_list .
    )               reduce using rule 42 (params_list -> pos COMMA params_list .)


state 89

    (45) named_params_list -> named COMMA named_params_list .
    )               reduce using rule 45 (named_params_list -> named COMMA named_params_list .)


state 90

    (47) named -> ID . COLON expr
    COLON           shift and go to state 81


state 91

    (47) named -> ID COLON expr .
    (22) expr -> expr . @ expr
    (23) expr -> expr . / expr
    (24) expr -> expr . * expr
    (25) expr -> expr . - expr
    (26) expr -> expr . + expr
    (39) cast_expr -> expr . AS TYPE
    (38) accessor_expr -> expr . DOT ID
    (37) node_expr -> expr . ( params_list )
    COMMA           reduce using rule 47 (named -> ID COLON expr .)
    )               reduce using rule 47 (named -> ID COLON expr .)
    @               shift and go to state 35
    /               shift and go to state 36
    *               shift and go to state 37
    -               shift and go to state 38
    +               shift and go to state 39
    AS              shift and go to state 40
    DOT             shift and go to state 41
    (               shift and go to state 42


state 92

    (36) vector_literal -> [ NUMBER COMMA NUMBER COMMA . NUMBER ]
    NUMBER          shift and go to state 93


state 93

    (36) vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER . ]
    ]               shift and go to state 94


state 94

    (36) vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .
    @               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    /               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    *               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    -               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    +               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    AS              reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    DOT             reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    (               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    COMMENT         reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    BOOL            reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    STRING          reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    NUMBER          reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    TYPE            reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    ID              reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    LET             reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    [               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    }               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    )               reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)
    COMMA           reduce using rule 36 (vector_literal -> [ NUMBER COMMA NUMBER COMMA NUMBER ] .)


Conflicts:

shift/reduce conflict for - in state 14 resolved as shift
shift/reduce conflict for ( in state 14 resolved as shift
shift/reduce conflict for - in state 70 resolved as shift
shift/reduce conflict for ( in state 70 resolved as shift
shift/reduce conflict for - in state 82 resolved as shift
shift/reduce conflict for ( in state 82 resolved as shift
shift/reduce conflict for - in state 83 resolved as shift
shift/reduce conflict for ( in state 83 resolved as shift
reduce/reduce conflict in state 87 resolved using rule params_list -> pos COMMA named_params_list
rejected rule (params_list -> named_params_list) in state 87